#!/usr/bin/env python3
"""
Prints detailed plan how to build a factory of a specified material.

Usage: {script} [options] NAME [IPM]

Arguments:
    NAME - Material to be produced.
    IPM - Items per minute to be produced.

Options:
    -h, --help
        Show this screen and exit.

    --verbose
        Raise verbosity level.
"""
import math
import sys
from contextlib import suppress
from difflib import get_close_matches
from fractions import Fraction
from graphlib import TopologicalSorter
from pathlib import Path

from materials_61774 import Material

IGNORED_MATERIALS = {
    # "advanced-circuit",
    # "electronic-circuit",
    # "plastic-bar",
    # "processing-unit",
    # "sulfuric-acid",
}

MATERIALS = Material.load_materials()

COLLECTIONS = {
    "science-packs": {
        "automation-science-pack": Fraction(1),
        "logistic-science-pack": Fraction(1),
        "chemical-science-pack": Fraction(1),
        "military-science-pack": Fraction(1),
        "production-science-pack": Fraction(1),
        "utility-science-pack": Fraction(1),
        "space-science-pack": Fraction(1),
    },
    "rocket-silo-research": {
        "automation-science-pack": Fraction(5750),
        "logistic-science-pack": Fraction(5565),
        "chemical-science-pack": Fraction(3650),
        "production-science-pack": Fraction(1600),
        "utility-science-pack": Fraction(1300),
    },
}


def show_plan(target: str, target_ipm: Fraction):
    graph = {mat: rec.ingredients for mat, rec in MATERIALS.items()}
    total = {mat: Fraction(0) for mat in TopologicalSorter(graph).static_order()}
    if target in COLLECTIONS:
        for material, amount in COLLECTIONS[target].items():
            total[material] = amount * target_ipm
    else:
        total[target] = target_ipm
    for material, amount in reversed(total.items()):
        if amount == 0:
            continue
        amount_str = math.ceil(10 * amount) / 10 if amount % 1 else int(amount)
        line = f"{float(amount/MATERIALS[material].items_per_lane):9.2f} {material:23} IPM={amount_str}"
        if MATERIALS[material]:
            buildings = math.ceil(amount / 60 * MATERIALS[material].buildings * 10) / 10
            buildings = int(buildings) if buildings % 1 == 0 else buildings
            suffix = f" [{buildings}]"
            suffix += " <- " + ", ".join(
                f"\x1b[9{MATERIALS[ingr].color}m{ingr}:{float(amount*x):.1f}"
                for ingr, x in MATERIALS[material].ingredients.items()
            )
        else:
            suffix = "\x1b[0m <- source"
        line += " " * (43 - len(line)) + suffix
        h = MATERIALS[material].color
        if material in IGNORED_MATERIALS and material != target:
            print(f"\x1b[9;9{h}m" + line + "\x1b[0m")
            continue
        print(f"\x1b[9{h}m" + line + "\x1b[0m")
        for ingr, x in MATERIALS[material].ingredients.items():
            total[ingr] += x * amount
    print()


def main(script_name: str, *script_args: str):
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    setattr(debug, "enabled", args["--verbose"])
    debug(f"Running with arguments {dict(args)!r}")
    target = args["NAME"]
    target_ipm = Fraction(args["IPM"] or "900")
    available_targets = list(MATERIALS) + list(COLLECTIONS)
    if target not in available_targets:
        print(f"\x1b[91mERROR:\x1b[0m I have no idea what \x1b[91m{target}\x1b[0m is!")
        prefixes = ["Did you mean", "or maybe", "or"]
        for i, suggestion in enumerate(get_close_matches(target, available_targets, 3, 0.5)):
            print(f"       {prefixes[i]} \x1b[92m{suggestion}\x1b[0m?")
        exit(1)
    show_plan(target, target_ipm)


def to_continue(msg: str = "Press enter to continue... "):
    with suppress(EOFError):
        return input(msg) in ("", "\r")
    print()
    return True


def debug(*objects: object, sep: str = " "):
    if getattr(debug, "enabled", False):
        print(sep.join(map(str, objects)))


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
