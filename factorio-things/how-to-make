#!/usr/bin/env python3
"""
Prints detailed plan how to build a factory of a specified material.

Usage: {script} [options] NAME [IPM]

Arguments:
    NAME - Material to be produced or multiple materials separated by comma.
    IPM - Items per minute to be produced.

Options:
    -h, --help
        Show this screen and exit.

    --verbose
        Raise verbosity level.

    -i, --interactive
        Interactive.
"""
import math
import sys
from contextlib import suppress
from difflib import get_close_matches
from fractions import Fraction
from itertools import chain, combinations
from pathlib import Path

from frozendict import frozendict

from materials_61774 import Material

IGNORED_MATERIALS = {
    "advanced-circuit",
    "electronic-circuit",
    "plastic-bar",
    "processing-unit",
    "sulfuric-acid",
    "steel-plate",
    "iron-plate",
    "copper-plate",
    "low-density-structure",
    "light-oil",
    "petroleum-gas",
    # "iron-gear-wheel",
    "engine-unit",
    "stone-brick",
}

MATERIALS = Material.load_materials()
COAL, IRON, COPPER, PLASTIC, GREEN, RED, BLUE = Material.load_the_boys()

COLLECTIONS = {
    "science-packs": {
        "automation-science-pack": Fraction(1),
        "logistic-science-pack": Fraction(1),
        "chemical-science-pack": Fraction(1),
        "military-science-pack": Fraction(1),
        "production-science-pack": Fraction(1),
        "utility-science-pack": Fraction(1),
        # 1000 science-pack = 1 satellite + 100 rocket-part
        "satellite": Fraction(1, 1000),
        "rocket-part": Fraction(100, 1000) * 10 / 14,
        # P.S. I can make productivity modules by hand if it comes to that!
    },
    "science-packs-for-artillery": {
        "automation-science-pack": Fraction(1),
        "logistic-science-pack": Fraction(1),
        "chemical-science-pack": Fraction(1),
        "military-science-pack": Fraction(1),
        # "production-science-pack": Fraction(1),
        "utility-science-pack": Fraction(1),
        "satellite": Fraction(1, 1000),
        "rocket-part": Fraction(100, 1000) * 10 / 14,
    },
    "science-packs-for-drones": {
        "automation-science-pack": Fraction(1),
        "logistic-science-pack": Fraction(1),
        "chemical-science-pack": Fraction(1),
        # "military-science-pack": Fraction(1),
        "production-science-pack": Fraction(1),
        "utility-science-pack": Fraction(1),
        "satellite": Fraction(1, 1000),
        "rocket-part": Fraction(100, 1000) * 10 / 14,
    },
    "rocket-silo-research": {
        "automation-science-pack": Fraction(5750),
        "logistic-science-pack": Fraction(5565),
        "chemical-science-pack": Fraction(3650),
        "production-science-pack": Fraction(1600),
        "utility-science-pack": Fraction(1300),
    },
}


def show_plan(targets: dict[str, Fraction], target_ipm: Fraction, interactive: bool = False):
    targets = dict_sum(
        dict((mat, ingr_ipm * ipm * target_ipm) for mat, ingr_ipm in COLLECTIONS[target].items())
        if target in COLLECTIONS
        else {target: ipm * target_ipm}
        for target, ipm in targets.items()
    )
    ignored_materials = IGNORED_MATERIALS - set(targets)
    total = dict_sum(
        MATERIALS[mat].total_cost(ipm, (lambda x: x.name in ignored_materials)) for mat, ipm in targets.items()
    )
    materials = total.items() if interactive else reversed(total.items())
    current_wares = {}
    for material, amount in materials:
        amount_str = math.ceil(10 * amount) / 10 if amount % 1 else int(amount)
        line = f"{float(amount/material.items_per_lane):9.2f} {material.name:23} IPM={amount_str}"
        if material and (material.name not in ignored_materials):
            buildings = math.ceil(amount / 60 * material.buildings * 10) / 10
            buildings = int(buildings) if buildings % 1 == 0 else buildings
            suffix = f" [{buildings}]"
            suffix += " <- " + ", ".join(
                f"\x1b[{MATERIALS[ingr].color}m{ingr}:{float(amount*x):.1f}\x1b[0m"
                for ingr, x in material.ingredients.items()
            )
        else:
            suffix = "\x1b[0m <- source"
        line += " " * (43 - len(line)) + suffix
        print(f"\x1b[{material.color}m" + line + "\x1b[0m")
        if interactive:
            if material.name not in ignored_materials:
                current_wares = dict_substract(current_wares, {i: x * amount for i, x in material})
                current_wares = {i: x for i, x in current_wares.items() if x}
            for mat, x in current_wares.items():
                print(f"{float(x/mat.items_per_lane):3.2f} \x1b[{mat.color}m{mat.name:23}\x1b[0m IPM={math.ceil(x)}")
            input()
            print(f"\x1b[{len(current_wares) + 1}A\x1b[0J", end="")
            current_wares = dict_sum(current_wares, {material: amount})
    print()


def show_nice_sizes(target_material: Material):
    def ignored(material: Material):
        return material.name != target_material.name and material.name == "sulfuric-acid"

    def get_nice_inputs(original_total: dict):
        results = []
        for inputs in subsets([BLUE, RED, GREEN]):
            if target_material in inputs:
                continue
            total = original_total
            result = {}
            inputs += (IRON, COPPER, PLASTIC)
            for inp in (inp for inp in inputs if inp in total):
                result[inp] = total[inp]
                total = dict_substract(total, inp.total_cost(total[inp], ignored))
            if all(x % 900 == 0 or x % 900 > 886.5 for inp, x in result.items()):
                results.append(frozendict(result))
        return list(set(results))

    nice_sizes = []
    total = target_material.total_cost(1, ignored)
    cost = sum((total.get(x, Fraction(0)) for x in [IRON, COPPER, PLASTIC]), Fraction(0))
    for i in range(1, round(12 * cost) + 1):
        ipm = i * 900 / cost
        total = target_material.total_cost(ipm, ignored)
        for inputs in get_nice_inputs(total):
            nice_sizes.append((ipm, inputs))
        if len(nice_sizes) >= 5:
            break
    direct = {mat: x for mat, x in target_material}
    direct_inputs_str = " and ".join(f"\x1b[{inp.color}m{f2s(x)} {inp}\x1b[0m" for inp, x in direct.items())
    print(
        f" Generaly \x1b[{target_material.color}m{target_material.name}\x1b[0m"
        f" is made of {direct_inputs_str}.\n"
        " But speaking in term of lanes of basic resources we get these options:"
    )
    if not nice_sizes:
        print("\x1b[91mFAILURE: No nice sizes found...\x1b[0m")
        total = target_material.total_cost(900, ignored)
        inputs = [IRON, COPPER, PLASTIC]
        nice_sizes = [(900, {inp: total[inp] for inp in inputs if inp in total})]
    ipm_len = max(len(str(ipm)) for ipm, _ in nice_sizes)
    belts_len = max(len(f2s(ipm / 900)) for ipm, _ in nice_sizes)
    for i, (ipm, inputs) in enumerate(nice_sizes):
        belts = f2s(ipm / 900)
        inputs_str = " ".join(f"\x1b[{inp.color}m{inp}:{f2s(x/900)}\x1b[0m" for inp, x in inputs.items())
        print(
            f"\x1b[{target_material.color}m"
            # f"IPM={ipm:{ipm_len}<}"
            f"     {target_material.name}:{belts:{belts_len}}\x1b[0m"
            # f" <= {direct_inputs_str}"
            f" <= {inputs_str}"
        )


def main(script_name: str, *script_args: str):
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    setattr(debug, "enabled", args["--verbose"])
    debug(f"Running with arguments {dict(args)!r}")
    available_targets = list(MATERIALS) + list(COLLECTIONS)
    targets = {
        target.strip(): Fraction((x + ["1"])[0].strip())
        for target, *x in (s.strip().split(":") for s in args["NAME"].split(","))
    }
    for target in targets:
        if target not in available_targets:
            print(f"\x1b[91mERROR:\x1b[0m I have no idea what \x1b[91m{target}\x1b[0m is!")
            prefixes = ["Did you mean", "or maybe", "or"]
            for i, suggestion in enumerate(get_close_matches(target, available_targets, 3, 0.5)):
                print(f"       {prefixes[i]} \x1b[92m{suggestion}\x1b[0m?")
            exit(1)
    if args["IPM"]:
        show_plan(targets, Fraction(args["IPM"]), interactive=args["--interactive"])
    elif ":" in args["NAME"]:
        show_plan(targets, Fraction(1), interactive=args["--interactive"])
    else:
        show_nice_sizes(MATERIALS[target])


def to_continue(msg: str = "Press enter to continue... "):
    with suppress(EOFError):
        return input(msg) in ("", "\r")
    print()
    return True


def dict_sum(*dicts):
    if len(dicts) == 1 and not hasattr(dicts[0], "items"):
        dicts = dicts[0]
    total = {}
    for dict in dicts:
        for key, value in dict.items():
            total[key] = value if key not in total else total[key] + value
    return total


def dict_substract(dict1, dict2):
    total = dict(dict1)
    for key, value in dict2.items():
        total[key] -= value
    return total


def subsets(items):
    return chain(*(combinations(items, r) for r in range(len(items) + 1)))


def f2s(number: Fraction) -> str:
    return str(number) if number % 1 == 0 else str(math.ceil(number * 100) / 100)


def debug(*objects: object, sep: str = " "):
    if getattr(debug, "enabled", False):
        print(sep.join(map(str, objects)))


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
