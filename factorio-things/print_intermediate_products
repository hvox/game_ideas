#!/usr/bin/env python3
r"""
This program calculates the amount of all intermediate
products needed to produce the end products you want.

Usage:
    print_intermediate_products <materials>...
    print_intermediate_products -h | --help

Arguments:
    materials      Desired end products in format "name:amount",
                   where amount is per minute.

Options:
    -h --help      Print this help message and exit.
"""
from difflib import get_close_matches
from fractions import Fraction
from collections import defaultdict
from math import ceil
from sys import stderr
from os import get_terminal_size

from factorio.calculator import get_total
from factorio.recipes import MATERIALS, RECIPES, FLUIDS

TICKS_PER_SECOND = Fraction("60")
FACILITIES = {
    "assembler": Fraction("0.75"),
    "furnace": Fraction("2"),
    "chemical plant": Fraction("1"),
    # "rocket silo": 1000 / ((3684 - 1250) / TICKS_PER_SECOND + 300),
    "rocket silo": Fraction("1")
}
ALIASES = {
    "science-packs": [
        ("science-pack-1", 1),
        ("science-pack-2", 1),
        ("military-science-pack", 1),
        ("science-pack-3", 1),
        ("production-science-pack", 1),
        ("utility-science-pack", 1),
        ("space-science-pack", 1),
    ],
}


def main(*products: dict[str, Fraction]):
    total = get_total(*products)
    print(" material".ljust(26), "IPM        belts/tubes")
    try:
        terminal_width, _ = get_terminal_size()
    except OSError:
        terminal_width = 224
    for material, amount in total.items():
        belts_or_tubes = amount / 60000 if material in FLUIDS else amount / 900
        if recipe := RECIPES.get(material):
            facilities = amount * recipe.creation_time / FACILITIES[recipe.facility] / 60
            notes = f"{ceil(facilities * 10) / 10} {recipe.facility}s".ljust(20)
            ingredients = [
                (mat, x * amount / (60000 if mat in FLUIDS else 900))
                for mat, x in recipe.ingredients.items()
            ]
            notes += " <- " + ", ".join(f"{mat}:{ceil(x * 100) / 100}" for mat, x in ingredients)
            if 47 + len(notes) > terminal_width:
                notes = notes[:terminal_width - 50] + "..."
        else:
            notes = "source material"
        print(
            f" {material} ".ljust(26, "-"),
            f"{ceil(amount * 1000) / 1000} ".ljust(10, "-"),
            f"{ceil(belts_or_tubes * 100) / 100} <".ljust(8, "-"),
            str(notes),
        )


if __name__ == "__main__":
    args = __import__("docopt").docopt(__doc__)
    products = [defaultdict(lambda: Fraction(0))]
    errors_encountered = False
    for material_description in args["<materials>"]:
        if material_description == "OR":
            products.append(defaultdict(lambda: Fraction(0)))
            continue
        try:
            material, amount_str = material_description.split(":", 1)
            amount = Fraction(amount_str)
        except ValueError:
            msg = f'Argument {material_description!r} does not follow the format "name:amount".'
            print(msg, file=stderr)
            errors_encountered = True
            continue
        if material in MATERIALS:
            products[-1][material] += amount
        elif (materials := ALIASES.get(material)) is not None:  # lua whould handle that better
            for material, material_amount in materials:
                products[-1][material] += amount * material_amount
        else:
            guess = get_close_matches(material, list(MATERIALS) + list(ALIASES), 1, 0.0)[0]
            print(f"Material {material!r} not found. Maybe you meant {guess!r}?", file=stderr)
            errors_encountered = True
            continue
    if errors_encountered:
        exit(1)
    main(*products)
