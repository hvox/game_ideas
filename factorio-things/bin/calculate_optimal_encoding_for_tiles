#!/usr/bin/env python3
from queue import PriorityQueue

from factorio import binary_encoding
from factorio.tiles import DEFAULT_TILES, Blueprint


def get_huffman_encoding(frequencies: list[int]) -> list[str]:
    queue = PriorityQueue()
    for i, freq in enumerate(frequencies):
        queue.put((freq, [("", i)]))
    for _ in range(len(frequencies) - 1):
        f1, left = queue.get()
        f2, right = queue.get()
        result = [("0" + code, i) for code, i in left]
        result += [("1" + code, i) for code, i in right]
        queue.put((f1 + f2, result))
    encoding = sorted((i, code) for code, i in queue.get()[1])
    return [code for _, code in encoding]


tiles, statistics = {}, {}
for tile_name, tile_code in DEFAULT_TILES.items():
    blueprint = Blueprint.from_tile_code(tile_code)
    tiles[tile_name] = blueprint
    width, height = blueprint.size
    grid = [None] * width * height
    for pos, entity in blueprint.entities.items():
        x, y = (int(x) if x.is_integer() else int(x - 0.5) for x in pos)
        assert 0 <= x < width and 0 <= y < height
        grid[y * width + x] = entity
    for entity in grid:
        if entity is None:
            key = ()
        else:
            direction = (attributes := entity[1].copy()).pop("direction")
            key = (entity[0], direction) + sum(sorted(attributes.items()), ())
        statistics[key] = statistics.setdefault(key, 0) + 1
statistics[("CUSTOM",)] = 0
encoding = get_huffman_encoding(statistics.values())
print("ENCODING = {")
for elem, code in sorted(zip(statistics, encoding)):
    print(f"    {elem!r}: {code!r},")
print("}\n\n")
binary_encoding.ENCODING = dict(zip(statistics, encoding))
print("DEFAULT_TILES = {")
for tile_name, blueprint in tiles.items():
    tile_code = blueprint.to_tile_code()
    print(f"    {tile_name!r}: {tile_code!r},")
print("}")
